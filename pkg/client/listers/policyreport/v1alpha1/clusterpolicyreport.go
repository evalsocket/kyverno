/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/nirmata/kyverno/pkg/api/policyreport/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterPolicyReportLister helps list ClusterPolicyReports.
// All objects returned here must be treated as read-only.
type ClusterPolicyReportLister interface {
	// List lists all ClusterPolicyReports in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterPolicyReport, err error)
	// ClusterPolicyReports returns an object that can list and get ClusterPolicyReports.
	ClusterPolicyReports(namespace string) ClusterPolicyReportNamespaceLister
	ClusterPolicyReportListerExpansion
}

// clusterPolicyReportLister implements the ClusterPolicyReportLister interface.
type clusterPolicyReportLister struct {
	indexer cache.Indexer
}

// NewClusterPolicyReportLister returns a new ClusterPolicyReportLister.
func NewClusterPolicyReportLister(indexer cache.Indexer) ClusterPolicyReportLister {
	return &clusterPolicyReportLister{indexer: indexer}
}

// List lists all ClusterPolicyReports in the indexer.
func (s *clusterPolicyReportLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterPolicyReport, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterPolicyReport))
	})
	return ret, err
}

// ClusterPolicyReports returns an object that can list and get ClusterPolicyReports.
func (s *clusterPolicyReportLister) ClusterPolicyReports(namespace string) ClusterPolicyReportNamespaceLister {
	return clusterPolicyReportNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterPolicyReportNamespaceLister helps list and get ClusterPolicyReports.
// All objects returned here must be treated as read-only.
type ClusterPolicyReportNamespaceLister interface {
	// List lists all ClusterPolicyReports in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterPolicyReport, err error)
	// Get retrieves the ClusterPolicyReport from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterPolicyReport, error)
	ClusterPolicyReportNamespaceListerExpansion
}

// clusterPolicyReportNamespaceLister implements the ClusterPolicyReportNamespaceLister
// interface.
type clusterPolicyReportNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterPolicyReports in the indexer for a given namespace.
func (s clusterPolicyReportNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterPolicyReport, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterPolicyReport))
	})
	return ret, err
}

// Get retrieves the ClusterPolicyReport from the indexer for a given namespace and name.
func (s clusterPolicyReportNamespaceLister) Get(name string) (*v1alpha1.ClusterPolicyReport, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clusterpolicyreport"), name)
	}
	return obj.(*v1alpha1.ClusterPolicyReport), nil
}
