/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/nirmata/kyverno/pkg/api/kyverno/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KyvernoPolicyReportLister helps list KyvernoPolicyReports.
type KyvernoPolicyReportLister interface {
	// List lists all KyvernoPolicyReports in the indexer.
	List(selector labels.Selector) (ret []*v1.KyvernoPolicyReport, err error)
	// KyvernoPolicyReports returns an object that can list and get KyvernoPolicyReports.
	KyvernoPolicyReports(namespace string) KyvernoPolicyReportNamespaceLister
	KyvernoPolicyReportListerExpansion
}

// kyvernoPolicyReportLister implements the KyvernoPolicyReportLister interface.
type kyvernoPolicyReportLister struct {
	indexer cache.Indexer
}

// NewKyvernoPolicyReportLister returns a new KyvernoPolicyReportLister.
func NewKyvernoPolicyReportLister(indexer cache.Indexer) KyvernoPolicyReportLister {
	return &kyvernoPolicyReportLister{indexer: indexer}
}

// List lists all KyvernoPolicyReports in the indexer.
func (s *kyvernoPolicyReportLister) List(selector labels.Selector) (ret []*v1.KyvernoPolicyReport, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KyvernoPolicyReport))
	})
	return ret, err
}

// KyvernoPolicyReports returns an object that can list and get KyvernoPolicyReports.
func (s *kyvernoPolicyReportLister) KyvernoPolicyReports(namespace string) KyvernoPolicyReportNamespaceLister {
	return kyvernoPolicyReportNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KyvernoPolicyReportNamespaceLister helps list and get KyvernoPolicyReports.
type KyvernoPolicyReportNamespaceLister interface {
	// List lists all KyvernoPolicyReports in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.KyvernoPolicyReport, err error)
	// Get retrieves the KyvernoPolicyReport from the indexer for a given namespace and name.
	Get(name string) (*v1.KyvernoPolicyReport, error)
	KyvernoPolicyReportNamespaceListerExpansion
}

// kyvernoPolicyReportNamespaceLister implements the KyvernoPolicyReportNamespaceLister
// interface.
type kyvernoPolicyReportNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KyvernoPolicyReports in the indexer for a given namespace.
func (s kyvernoPolicyReportNamespaceLister) List(selector labels.Selector) (ret []*v1.KyvernoPolicyReport, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KyvernoPolicyReport))
	})
	return ret, err
}

// Get retrieves the KyvernoPolicyReport from the indexer for a given namespace and name.
func (s kyvernoPolicyReportNamespaceLister) Get(name string) (*v1.KyvernoPolicyReport, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("kyvernopolicyreport"), name)
	}
	return obj.(*v1.KyvernoPolicyReport), nil
}
